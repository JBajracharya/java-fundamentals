/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linter;


import org.junit.Test;
import java.nio.file.Path;
import java.nio.file.Paths;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class AppTest {
    @Test public void testAppHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull("app should have a greeting", classUnderTest.getGreeting());
    }

    @Test public void testEmptyFile() {
        Path filePath = Paths.get("src/test/resources/emptyFile.js");
        String actual = App.missingSemicolon(filePath);
        String expected = "";
        assertEquals("Empty file", expected, actual);
    }

    @Test public void testFewErrors() {
        Path filePath = Paths.get("src/test/resources/fewErrors.js");
        String actual = App.missingSemicolon(filePath);
        String expected = "Line 3: Missing semicolon.\n" +
                "Line 32: Missing semicolon.\n" +
                "Line 40: Missing semicolon.\n" +
                "Line 41: Missing semicolon.\n" +
                "Line 76: Missing semicolon.\n";
        assertEquals("Few Errors", expected, actual);
    }

    @Test public void testNoErrors() {
        Path filePath = Paths.get("src/test/resources/noError.js");
        String actual = App.missingSemicolon(filePath);
        String expected = "";
        assertEquals("No errors", expected, actual);
    }

    @Test public void testOneError() {
        Path filePath = Paths.get("src/test/resources/oneError.js");
        String actual = App.missingSemicolon(filePath);
        String expected = "Line 69: Missing semicolon.\n";
        assertEquals("One Error", expected, actual);
    }

    @Test public void testmanyErrors() {
        Path filePath = Paths.get("src/test/resources/manyErrors.js");
        String actual = App.missingSemicolon(filePath);
        String expected = "Line 3: Missing semicolon.\n" +
                "Line 5: Missing semicolon.\n" +
                "Line 11: Missing semicolon.\n" +
                "Line 13: Missing semicolon.\n" +
                "Line 15: Missing semicolon.\n" +
                "Line 26: Missing semicolon.\n" +
                "Line 28: Missing semicolon.\n" +
                "Line 32: Missing semicolon.\n" +
                "Line 36: Missing semicolon.\n" +
                "Line 40: Missing semicolon.\n" +
                "Line 41: Missing semicolon.\n" +
                "Line 50: Missing semicolon.\n" +
                "Line 51: Missing semicolon.\n" +
                "Line 64: Missing semicolon.\n" +
                "Line 70: Missing semicolon.\n" +
                "Line 71: Missing semicolon.\n" +
                "Line 72: Missing semicolon.\n" +
                "Line 73: Missing semicolon.\n" +
                "Line 74: Missing semicolon.\n" +
                "Line 76: Missing semicolon.\n" +
                "Line 77: Missing semicolon.\n" +
                "Line 78: Missing semicolon.\n" +
                "Line 79: Missing semicolon.\n" +
                "Line 80: Missing semicolon.\n" +
                "Line 82: Missing semicolon.\n" +
                "Line 83: Missing semicolon.\n" +
                "Line 84: Missing semicolon.\n" +
                "Line 85: Missing semicolon.\n" +
                "Line 86: Missing semicolon.\n" +
                "Line 88: Missing semicolon.\n" +
                "Line 89: Missing semicolon.\n" +
                "Line 90: Missing semicolon.\n" +
                "Line 91: Missing semicolon.\n" +
                "Line 92: Missing semicolon.\n" +
                "Line 94: Missing semicolon.\n" +
                "Line 95: Missing semicolon.\n" +
                "Line 96: Missing semicolon.\n" +
                "Line 97: Missing semicolon.\n" +
                "Line 98: Missing semicolon.\n" +
                "Line 99: Missing semicolon.\n" +
                "Line 100: Missing semicolon.\n" +
                "Line 101: Missing semicolon.\n";
        assertEquals("Empty file", expected, actual);
    }

}
