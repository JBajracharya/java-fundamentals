/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public static int[] roll(int rollTimes) {
        int[] rollResultArray = new int[rollTimes];
        for (int i = 0; i < rollTimes; i++){
            int rollResult = (int)((Math.random() * (6 - 1)) + 1);
            rollResultArray[i] = rollResult;
        }
        return rollResultArray;
    }

    public static boolean containsDuplicates(int[] numArray) {
        for (int i = 0; i < numArray.length; i++) {
            for (int j = 0; j < numArray.length; j++) {
                if (numArray[i] == numArray[j] && i != j) {
                    return true;
                }
            }
        }
        return false;
    }

    public static int average (int[] array) {
        int total = 0;
        for(int num : array){
            total += num;
        }
        return total/array.length;
    }

    public static int lowestAverage(int[][] array) {
        int[] averageArray = new int[array.length];
        for ( int i  = 0; i < array.length; i++) {
            int total = 0;
            int average = 0;

            for (int j = 0; j < array[i].length; j++){
                total += array[i][j];
            }
            average = total/array[i].length;
            averageArray[i] = average;
        }
        Arrays.sort(averageArray);
        return averageArray[0];
    }

    public static String weatherData(int[][] temperature) {
        int highestTemp = Integer.MIN_VALUE;
        int lowestTemp = Integer.MAX_VALUE;

        HashSet<Integer> uniqueTemperature = new HashSet<>();

        for (int i = 0; i < temperature.length; i++) {
            for (int j = 0; j < temperature[i].length; j++) {
                if(highestTemp < temperature[i][j]) {
                    highestTemp = temperature[i][j];
                }
                if(lowestTemp > temperature[i][j]) {
                    lowestTemp = temperature[i][j];
                }
                uniqueTemperature.add(temperature[i][j]);
            }
        }
        StringBuilder outputData = new StringBuilder();
        outputData.append("High: " + highestTemp + "\n" + "Low: " + lowestTemp);

        for (int i = lowestTemp; i <= highestTemp; i++) {
            if(!uniqueTemperature.contains(i)) {
                outputData.append("\nNever saw temperature: " + i);
            }
        }
        return outputData.toString();
    }

    public static String tally(List<String> votes) {
        HashMap<String, Integer> votesPerName = new HashMap();
        int mostVote = 0;
        String winner = "";
        for (String name : votes) {
            votesPerName.put(name, 0);
        }
        for (String vote : votes) {
            votesPerName.put(vote, votesPerName.get(vote) + 1);
        }
        for (String name : votesPerName.keySet()) {
            if (mostVote < votesPerName.get(name)) {
                mostVote = votesPerName.get(name);
                winner = name;
            }
        }
        return winner;
    }
}
